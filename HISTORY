v 0.1.3
=======
- Bug fix: Launchy would crash when entering large enough number and any base
  output except decimal was turned on.

v 0.1.2
=======
- added suport for binary, hexadecimal and octal numbers in input and output.
- added bunch of options related to new number representation.
- because it became more serious calculator, MathyResurrected got more serious
  icon. New icon taken from Crystal project, mainly to distinct MathyResurrected
  from Calcy.

v 0.1.1
=======
* Changed the way "ans" variable is calculated. Now enter key has to be pressed
  for it to be remeber (similar to classic calculator where '=' has to be 
  presed for the "Ans" to work. 
+ Implemented configurable thousand separator.
+ Implemented manually configurable decimal point. Before two characters were 
  allowed as decimal point: dot ans anything system locale defined. Now, only 
  one is allowed and it is posible to configure which one. Also, this 
  configuration has been made safe, so it is not possible for example to use 
  same character as decimal separator and function arguments separator.
+ Introduced new keyword allowed in expressions: "ans". It retrieves result of 
  prevoius calculation.
+ Small enoug numbers are now by default shown as zero. Configurable.
* Changed tag on Launchy's dropdown list

v 0.1.0
=======
* Added option to use Enter key for clipboard copy of results
* Add option for show/hide digit grouping in output

v 0.0.9
=======
* Updated plugin dependencies to ANTLR v3.2 and Qt 4.6.0
* Rebuild for Launchy v2.5

v 0.0.8
=======
+ Added option to use ',' (coma) as function argument separator in locales 
  where coma is not used as decimal separator. In locales where it is used, 
  this option is disabled. 
* fixed bug with wrong value of pi constant. 
  
v 0.0.7
=======
* fixed bug with simple matching: if simple matching was chosen, any input
  would be grabed by MathyResurected, not only strings starting with '='
+ added detection of numeric conversion errors
* split lexer and parser gammars

v 0.0.6
=======
+ finalized settings GUI
- removed options for output thousand separator character, it is now 
  handled using system locale setings. 
- improved lexer error control (added colectLexerError to bridge API,
  but nothing of that stuff is used yet because lexer grammar needs 
  to be updated also to call this function when needed).
- removed options for input decimal separator character, it is now 
  handled using system locale setings. 

v 0.0.5
=======
+ first completelly functional build, tested Launchy loading and 
  settings management, evaluation of simple expressions...
+ A lot's of small bugfixes.

v 0.0.4
=======
+ Implemented most of the methods in Launchy Plugin skeleton file. 
* Adjusted evaluator class so it uses aplication options if available, or
  fallbacks to defaults. 
+ New settings GUI
+ Aded exception hierarchy for future error control and reporting
* Separated headers for math bridge API and its types. 
	* this way, evaluator class header doeasn't have to include math bridge
	  api headers, ANTLR headers and ANTLR generated headers so usage of 
	  ANTLR part of code is localized in evaluator class compilation unit.
	* there are some issues concerning antlr.h if it isn't the first 
	  include in include list. I have no time to explore that, but doing it 
	  this way, I don't even have to.
+ Added evaluator class on top of C evaluation API generated by ANTLR
	* main task of this class is to provide clean OOP acess to expression
	  validation and evaluation
	* this class is also responsible for periodical clearing of math bridge 
	  objects factory (factory data would be cleared anyway at program exit,
	  but evaluator class can do it periodically to free some memory). 
	  Evaluator class knows when factory objects are used and when they are 
	  not because it has complete control of running underlying parser/lexer
	  which on the other hand use this factory and objects it produces.
* Simplified embeded grammar actions
	* actions now return pointer to factory produced struct
	* pointers get deleted automaticaly
	* using pointers simplifies and shortens code in embedded grammar 
	  actions a LOT!
* Debugged lexer, parser and tree parser gramars resultng in some changes 
  to these
- Changed expression language specification. Constants are now case 
  sensitive and there is no implicit multiplication with constants any more. 
  Adjusted grammars. 

v 0.0.3
=======
* Changed evaluation bridge API so usage of ANTLR_String is now minimal
* Finished calculator grammar
+ Added math functions into evaluation bridge API
* Finished evaluation bridge API

v 0.0.2
=======
+ broadened grammar for expressions:
	+ added all functions
	+ added unary operators
+ designes GUI form for options, nothing implemented yet
+ validation exceptions
+ implemented part of bridge API

v 0.0.1
=======
* Created qmake project file and Visual Studio 2005 solution 
+ set up Launchy plugin API ( lib/pluginAPI )
+ created grammar files for parser/lexer/evaluator ( lib/parser )
+ created evaluation bridge API between MathyResurrected plugin and 
  evaluator
* built everything on windows using Visual Studio 2005, Qt OpenSource
  edition v4.5.2, ANTLR C runtime libantlr3c v3.1.3
* built everything on Kubuntu 9.04 using g++, Qt and ANTLR C runtime 
  libantlr3c v3.1.3