/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : ComplexEval.g
 *     -                            On : 2010-09-26 17:45:09
 *     -           for the tree parser : ComplexEvalTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The tree parser ComplexEval has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pComplexEval, which is returned from a call to ComplexEvalNew().
 *
 * The methods in pComplexEval are  as follows:
 *
 *  - ComplexPtr      pComplexEval->prog(pComplexEval)
 *  - ComplexPtr      pComplexEval->expr(pComplexEval)
 *  - ComplexPtr      pComplexEval->unary(pComplexEval)
 *  - ComplexPtr      pComplexEval->atom(pComplexEval)
 *  - ComplexPtr      pComplexEval->funct_ref1(pComplexEval)
 *  - ComplexPtr      pComplexEval->funct_ref2(pComplexEval)
 *  - ComplexPtr      pComplexEval->constant_ref(pComplexEval)
 *  - ComplexPtr      pComplexEval->si_unit_ref(pComplexEval)
 *  - ComplexPtr      pComplexEval->imaginary_number(pComplexEval)
 *  - ComplexPtr      pComplexEval->real_number(pComplexEval)
 *  - ComplexPtr      pComplexEval->dec_num_percent(pComplexEval)
 *  - ComplexPtr      pComplexEval->hex_num_percent(pComplexEval)
 *  - ComplexPtr      pComplexEval->oct_num_percent(pComplexEval)
 *  - ComplexPtr      pComplexEval->bin_num_percent(pComplexEval)
 *  - ComplexPtr      pComplexEval->dec_num(pComplexEval)
 *  - ComplexPtr      pComplexEval->hex_num(pComplexEval)
 *  - ComplexPtr      pComplexEval->oct_num(pComplexEval)
 *  - ComplexPtr      pComplexEval->bin_num(pComplexEval)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_ComplexEval_H
#define _ComplexEval_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

	#include "math_bridge_API.h"

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct ComplexEval_Ctx_struct ComplexEval, * pComplexEval;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for ComplexEval
 */
struct ComplexEval_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_TREE_PARSER	    pTreeParser;


     ComplexPtr (*prog)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*expr)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*unary)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*atom)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*funct_ref1)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*funct_ref2)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*constant_ref)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*si_unit_ref)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*imaginary_number)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*real_number)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*dec_num_percent)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*hex_num_percent)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*oct_num_percent)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*bin_num_percent)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*dec_num)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*hex_num)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*oct_num)	(struct ComplexEval_Ctx_struct * ctx);
     ComplexPtr (*bin_num)	(struct ComplexEval_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct ComplexEval_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pComplexEval ComplexEvalNew         (pANTLR3_COMMON_TREE_NODE_STREAM instream);
ANTLR3_API pComplexEval ComplexEvalNewSSD      (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the tree parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define FUNCTION      8
#define EXPONENT      108
#define FN_POLAR      98
#define SI_PREFIX_TERA      44
#define BW_NAND      37
#define MOD      18
#define SI_PREFIX_ZEPTO      58
#define ARG_SEPARATOR      21
#define FN_MAX      93
#define BW_XOR      28
#define LEXER_ERROR      111
#define ATOM      9
#define EOF      -1
#define BW_AND2      31
#define SI_CONVERT      6
#define SI_PREFIX_YOTTA      40
#define FN_TANH      77
#define BW_NOT2      33
#define FN_COS      69
#define FN_ATAN      73
#define FN_ASIN      71
#define POW      20
#define SI_PREFIX_EXA      42
#define SI_PREFIX_ZETTA      41
#define FN_LOG10      83
#define SI_PREFIX_GIGA      45
#define SI_PREFIX_MILLI      52
#define FN_NORM      97
#define OCTAL_NUMBER      105
#define SI_PREFIX_MEGA      46
#define BW_SHLEFT      29
#define OTHER_CHAR      112
#define SI_PREFIX_FEMTO      56
#define FN_MIN      92
#define MULT      16
#define SI_PREFIX_PETA      43
#define FN_PROJ      96
#define FN_ACOSH      79
#define FN_NRT      86
#define OCT      13
#define BINARY_NUMBER      106
#define WS      110
#define FN_COSH      76
#define SI_PREFIX_YOCTO      59
#define FN_RAD      95
#define LEFT_PAREN      23
#define CONSTANT_REF      7
#define FN_SQRT      84
#define BW_XNOR      39
#define FN_POW      85
#define BW_AND      25
#define BW_OR      26
#define RE      5
#define BW_XOR2      34
#define SI_PREFIX_ZEBI      66
#define FN_ABS      87
#define FN_CONJ      91
#define FN_DEG      94
#define FN_EXP      81
#define SI_PREFIX_PICO      55
#define SI_PREFIX_YOBI      67
#define CONSTANTS_PI      99
#define SI_PREFIX_NANO      54
#define RIGHT_PAREN      24
#define FN_ACOS      72
#define BW_SHRIGHT      30
#define DECIMAL_POINT      22
#define IM      4
#define SI_PREFIX_GIBI      62
#define SI_PREFIX_PEBI      64
#define HEX      12
#define SI_PREFIX_HECTO      48
#define FN_TAN      70
#define BW_SHLEFT2      35
#define BW_OR2      32
#define PLUS      14
#define SI_PREFIX_ATTO      57
#define FN_SINH      75
#define FN_LN      82
#define UNARY      10
#define SI_PREFIX_DECA      49
#define CONSTANTS_ANS      101
#define SI_PREFIX_EXBI      65
#define FN_ASINH      78
#define FLOAT_NUMBER      109
#define PERCENT      19
#define SI_PREFIX_TEBI      63
#define SI_PREFIX_DECI      50
#define SI_PREFIX_KIBI      60
#define FN_ARG      90
#define CONSTANTS_E      100
#define HEX_DIGIT      103
#define FN_IM      89
#define SI_PREFIX_CENTI      51
#define FN_SIN      68
#define COMPLEX_UNIT      102
#define MINUS      15
#define FLOAT_MANTISSA      107
#define SI_PREFIX_MEBI      61
#define SI_PREFIX_MICRO      53
#define FN_ATAN2      74
#define SI_PREFIX_KILO      47
#define BW_SHRIGHT2      36
#define FN_RE      88
#define BW_NOT      27
#define DIV      17
#define FN_ATANH      80
#define HEX_NUMBER      104
#define BW_NOR      38
#define BIN      11
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for ComplexEval
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
